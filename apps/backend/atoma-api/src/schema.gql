# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Compound {
  name: String!
  reducedFormula: String
  uuid: String!
}

type CompoundData {
  compoundProperty: CompoundProperty!
  pressure: Float
  temperature: Float
  uuid: String!
  value: String!
}

type CompoundDataEdge {
  cursor: String!
  node: CompoundData!
}

type CompoundEdge {
  cursor: String!
  node: Compound!
}

input CompoundPropertiesInput {
  after: String
  compoundUuid: String!
  first: Int!
}

type CompoundProperty {
  compound: Compound!
  compoundUuid: String!
  property: Property!
  propertyUuid: String!
  uuid: String!
  value(conditions: ConditionInput!): Float!
}

type CompoundPropertyEdge {
  cursor: String!
  node: CompoundProperty!
}

input CompoundPropertyInput {
  compoundUuid: String!
  propertyUuid: String!
}

union CompoundPropertyResult = CompoundProperty | NotFoundError

input ConditionInput {
  pressure: Float
  temperature: Float
}

input CreateCompoundDataInput {
  compoundUuid: String!
  conditions: [ConditionInput!]!
  propertyUuid: String!
  value: Float!
}

union CreateCompoundDataResult = CompoundData | NotFoundError

input CreateCompoundInput {
  name: String!
  reducedFormula: String!
}

input CreatePropertyInput {
  description: String!
  key: String!
  name: String!
  type: String!
  units: String!
}

union FindCompoundResult = Compound | NotFoundError

input FindPaginatedInput {
  after: String
  first: Int!
}

type Mutation {
  createCompound(payload: CreateCompoundInput!): Compound!
  createCompoundData(payload: CreateCompoundDataInput!): CreateCompoundDataResult!
  createProperty(payload: CreatePropertyInput!): Property!
}

type NotFoundError {
  code: String!
  message: String!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  totalCount: Int!
}

type PaginatedCompoundProperties {
  edges: [CompoundPropertyEdge!]
  nodes: [CompoundProperty!]
  pageInfo: PageInfo!
}

type PaginatedCompounds {
  edges: [CompoundEdge!]
  nodes: [Compound!]
  pageInfo: PageInfo!
}

type PaginatedProperties {
  edges: [PropertyEdge!]
  nodes: [Property!]
  pageInfo: PageInfo!
}

type Property {
  description: String!
  key: String!
  name: String!
  type: String!
  units: String!
  uuid: String!
}

type PropertyEdge {
  cursor: String!
  node: Property!
}

type Query {
  compound(name: String!): FindCompoundResult!
  compoundProperties(input: CompoundPropertiesInput!): PaginatedCompoundProperties!
  compoundProperty(input: CompoundPropertyInput!): CompoundPropertyResult!
  compounds(options: FindPaginatedInput!): PaginatedCompounds!
  properties(options: FindPaginatedInput!): PaginatedProperties!
}